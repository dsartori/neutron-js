(()=>{"use strict";var e={660:(e,t,i)=>{i.d(t,{Ak:()=>l,cd:()=>h,f$:()=>s,fm:()=>d,h8:()=>r,jX:()=>a,vS:()=>n,x5:()=>o});const s=3,n=1,r=2,o=0,l=0,d=1,h=2,a=3},550:(e,t,i)=>{i.d(t,{A:()=>r});var s=i(660);class n{constructor(e,t){this.gridXsize=e,this.gridYsize=t,this.aiEnabled=!1,this.finished=!1,this.selectedPiece=null,this.gameStarted=!1,this.grid=this.createInitialGrid(),this.difficulty=3}createInitialGrid(){const e=[];for(let t=0;t<this.gridXsize;t++){const t=[];for(let e=0;e<this.gridYsize;e++)t.push({state:s.x5,highlight:!1});e.push(t)}for(let t=0;t<5;t++)e[t][0].state=s.h8;for(let t=0;t<5;t++)e[t][this.gridYsize-1].state=s.vS;const t=Math.floor(this.gridXsize/2),i=Math.floor(this.gridYsize/2);return e[t][i].state=s.f$,this.turn=s.vS,this.turnStage=s.fm,e}initializeGameState(){this.grid=this.createInitialGrid(),this.finished=!1,this.selectedPiece=null,this.gameStarted=!1}getPiecesForColour(e){const t=[];for(let i=0;i<this.gridXsize;i++)for(let s=0;s<this.gridYsize;s++)this.grid[i][s].state===e&&t.push([i,s]);return t}isValidMove(e,t,i,s){this.zeroGridHighlights(),this.highlightMovesForX(e,t);const n=this.getHighlightedCells();return this.zeroGridHighlights(),n.some((([e,t])=>e===i&&t===s))}movePiece(e,t,i,n,r=!1){return!(!r&&!this.isValidMove(e,t,i,n))&&(this.grid[i][n].state=this.grid[e][t].state,this.grid[e][t].state=s.x5,!0)}switchTurn(){this.turnStage===s.Ak?this.turnStage=s.fm:this.turnStage===s.fm?(this.turnStage=s.cd,this.turn=s.h8):this.turnStage===s.cd?this.turnStage=s.jX:(this.turn=s.vS,this.turnStage=s.Ak)}neutronHasMoves(){const e=this.getPiecesForColour(s.f$),t=e[0][0],i=e[0][1];let n=0;for(let e=-1;e<=1;e++)for(let s=-1;s<=1;s++)if(t+e<0||t+e>=this.gridXsize||i+s<0||i+s>=this.gridYsize)n++;else{this.grid[t+e][i+s].state>0&&(0!==e||0!==s)&&n++}return 0===i||i===this.gridYsize-1?0:n<8}getMovesForGrid(e,t){const i=[];if(e.finished)return[];const n=e.getPiecesForColour(s.f$),r=[n[0]];e.highlightMovesForX(n[0][0],n[0][1]),r.push(...e.getHighlightedCells()),e.zeroGridHighlights();const o=t===s.vS?e.getPiecesForColour(s.vS):e.getPiecesForColour(s.h8);for(let t=1;t<r.length;t++)for(let s=0;s<o.length;s++){const l=e.cloneGrid(e);l.movePiece(n[0][0],n[0][1],r[t][0],r[t][1],!0),l.highlightMovesForX(o[s][0],o[s][1]);const d=l.getHighlightedCells();for(let e=0;e<d.length;e++){const l=[n[0],r[t]],h=[o[s],d[e]];i.push([l,h])}l.zeroGridHighlights()}return i}highlightMovesForX(e,t){let i,n,r;for(this.zeroGridHighlights(),i=t-1;i>=0&&(r=this.grid[e][i],r.state===s.x5);i--)n=r;for(n&&(n.highlight=!0),i=t+1;i<this.gridYsize&&(r=this.grid[e][i],r.state===s.x5);i++)n=r;for(n&&(n.highlight=!0),i=e-1;i>=0&&(r=this.grid[i][t],r.state===s.x5);i--)n=r;for(n&&(n.highlight=!0),i=e+1;i<this.gridXsize&&(r=this.grid[i][t],r.state===s.x5);i++)n=r;n&&(n.highlight=!0);let o=Math.min(e,t);for(i=1;i<=o&&(r=this.grid[e-i][t-i],r.state===s.x5);i++)n=r;for(n&&(n.highlight=!0),o=Math.min(this.gridXsize-e-1,t),i=1;i<=o&&(r=this.grid[e+i][t-i],r.state===s.x5);i++)n=r;for(n&&(n.highlight=!0),o=Math.min(this.gridXsize-e-1,this.gridYsize-t-1),i=1;i<=o&&(r=this.grid[e+i][t+i],r.state===s.x5);i++)n=r;for(n&&(n.highlight=!0),o=Math.min(e,this.gridYsize-t-1),i=1;i<=o&&(r=this.grid[e-i][t+i],r.state===s.x5);i++)n=r;n&&(n.highlight=!0)}alphaBeta(e,t,i,n,r){const o=this.getMovesForGrid(e,t);if(0===i||0===o.length||e.finished)return e.evaluateStateTurn(t);let l=t===s.h8?-1001:1001,d=t===s.h8?s.vS:s.h8;for(let h=0;h<o.length;h++){const a=this.applyMoves(e,o[h]);let c=a.evaluateStateTurn(d);if(a.finished||(c=this.alphaBeta(a,d,i-1,n,r)),t===s.h8?(l=Math.max(l,c),n=Math.max(n,c)):(l=Math.min(l,c),r=Math.min(r,c)),n>=r)break}return l}setDifficulty(e){[1,3,5].includes(e)&&(this.difficulty=e)}evaluateMoves(e,t,i){const n=this.getMovesForGrid(e,t);if(0===i||0===n.length||e.finished)return e.evaluateStateTurn(t);let r=[],o=t===s.h8?-1001:1001,l=t===s.h8?s.vS:s.h8;for(let d=0;d<n.length;d++){const h=this.applyMoves(e,n[d]);let a=h.evaluateStateTurn(l);h.finished||(a=this.alphaBeta(h,l,i-1,-1001,1001)),t===s.h8&&a>o||t===s.vS&&a<o?(o=a,r=[n[d]]):a===o&&r.push(n[d])}return r}getBestMoveForState(e,t){const i=this.evaluateMoves(e,t,this.difficulty);if(i.length>0){return i[Math.floor(Math.random()*i.length)]}return null}applyMoves(e,t){const i=t[0],s=t[1],[n,r]=i,[o,l]=s,d=this.cloneGrid(e);return d.movePiece(n[0],n[1],r[0],r[1],!0),d.movePiece(o[0],o[1],l[0],l[1],!0),d}evaluateStateTurn(e){let t=0,i=this.getPiecesForColour(s.f$)[0];const n=this.getPiecesForColour(s.h8),r=this.getPiecesForColour(s.vS),o=i[0],l=i[1];let d;s.vS;if(l===this.gridYsize-1)return t=-1e3,this.finished=!0,t;if(0===l)return t=1e3,this.finished=!0,t;if(!this.neutronHasMoves())return t=e===s.h8?-1e3:1e3,this.finished=!0,t;const h=e===s.vS?s.h8:s.vS,a=this.getMovesForGrid(this,h);for(let e of a)if(this.isWinningMove(this,e))return t-=500,t;const c=(e,i)=>{for(let s=0;s<e.length;s++){switch(e[s][1]){case 4:t+=5*(i?-1:1);break;case 3:t+=3*(i?-1:1);break;case 2:t+=1*(i?-1:1);break;case 1:t-=3*(i?-1:1);break;case 0:t-=5*(i?-1:1)}}};c(r,!0),c(n,!1);const g=(e,i,n)=>{if(d=this.grid[o][i],d.state===s.x5){let r=!0;for(let t=e;t!==i;t+=n?1:-1)if(d=this.grid[o][t],d.state!==s.x5){r=!1;break}r&&(t+=n?-300:300)}};g(l+1,this.gridYsize-1,!0),g(l-1,0,!1);const u=e=>{let i,n;const r=e?-25:25;for(n=1;o-n>=0&&l-n>=0&&(i=this.grid[o-n][l-n],i.state===s.x5);n++);for(n>1&&o-n>=0&&l-n>=0&&this.grid[o-n][l-n].state===s.x5&&(t+=r),n=1;o+n<this.gridXsize&&l-n>=0&&(i=this.grid[o+n][l-n],i.state===s.x5);n++);for(n>1&&o+n<this.gridXsize&&l-n>=0&&this.grid[o+n][l-n].state===s.x5&&(t+=r),n=1;o-n>=0&&l+n<this.gridYsize&&(i=this.grid[o-n][l+n],i.state===s.x5);n++);for(n>1&&o-n>=0&&l+n<this.gridYsize&&this.grid[o-n][l+n].state===s.x5&&(t+=r),n=1;o+n<this.gridXsize&&l+n<this.gridYsize&&(i=this.grid[o+n][l+n],i.state===s.x5);n++);n>1&&o+n<this.gridXsize&&l+n<this.gridYsize&&this.grid[o+n][l+n].state===s.x5&&(t+=r)};return u(!0),u(!1),!isNaN(t)&&isFinite(t)||(t=0),t}cloneGrid(e){const t=new n(this.gridXsize,this.gridYsize);for(let i=0;i<this.gridXsize;i++)for(let s=0;s<this.gridYsize;s++)t.grid[i][s].state=e.grid[i][s].state;return t}getHighlightedPiece(){for(let e=0;e<this.gridXsize;e++)for(let t=0;t<this.gridYsize;t++){const i=this.grid[e][t];if(i.state>0&&i.highlight)return[e,t]}return null}getHighlightedCells(){const e=[];for(let t=0;t<this.gridXsize;t++)for(let i=0;i<this.gridYsize;i++)this.grid[t][i].highlight&&e.push([t,i]);return e}zeroGridState(){for(let e=0;e<this.gridXsize;e++)for(let t=0;t<this.gridYsize;t++)this.grid[e][t].state=s.x5}zeroGridHighlights(){for(let e=0;e<this.gridXsize;e++)for(let t=0;t<this.gridYsize;t++)this.grid[e][t].highlight=!1}printMoves(e){let t="";return t+="--- Moves Array ---\n",e.forEach(((e,i)=>{const[s,n]=e,[r,o]=s,[l,d]=n;t+=`Move ${i+1}:\n`,t+=`  Neutron [${r[0]}, ${r[1]}] -> [${o[0]}, ${o[1]}] - `,t+=`  Piece [${l[0]}, ${l[1]}] -> [${d[0]}, ${d[1]}]\n\n`})),t+="-------------------",t}printBoardState(e){let t="\n";for(let i=0;i<e[0].length;i++){let n="";for(let t=0;t<e.length;t++){const r=e[t][i].state;r===s.x5?n+=". ":r===s.vS?n+="W ":r===s.h8?n+="B ":r===s.f$&&(n+="N ")}t+=n+"\n"}}isWinningMove(e,t){const[i,s]=t,n=i[1];return 0===n[1]||n[1]===e.gridYsize-1}}const r=n},839:(e,t,i)=>{var s=i(550),n=i(660);function r(e){e.initializeGameState();o(document.getElementById("gameGrid"),e),u(e),f(e),document.getElementById("winLabel").style.display="none",document.getElementById("wait-label").style.display="none",document.getElementById("help-button").style.display="flex",document.getElementById("toggleModeButton").disabled=!1}function o(e,t){e.innerHTML="";for(let i=0;i<t.gridYsize;i++)for(let s=0;s<t.gridXsize;s++){const r=document.createElement("div");r.classList.add("cell"),r.dataset.x=s,r.dataset.y=i,r.addEventListener("click",(()=>{h(s,i,t)})),e.appendChild(r);const o=t.grid[s][i].state;if(o!==n.x5){const e=document.createElement("img");e.src=g(o),e.classList.add("piece"),r.appendChild(e)}}}function l(e,t,i,s,n){const r=document.querySelector(`.cell[data-x="${e}"][data-y="${t}"]`);if(r){const o=r.querySelector(".piece");if(o){const l=r.getBoundingClientRect().width,d=(i-e)*l,h=(s-t)*l;return new Promise((r=>{o.style.transition="transform 0.5s ease",o.style.transform=`translate(${d}px, ${h}px)`,o.addEventListener("transitionend",(function l(){o.removeEventListener("transitionend",l),n.movePiece(e,t,i,s);const d=document.querySelector(`.cell[data-x="${i}"][data-y="${s}"]`);d&&d.appendChild(o),o.style.transition="",o.style.transform="",document.querySelectorAll(".highlight").forEach((e=>{e.classList.remove("highlight")})),r()}),{once:!0})}))}console.error(`No piece found in the cell at (${e}, ${t}) to animate.`)}else console.error(`No cell found at (${e}, ${t}) to animate.`);return Promise.resolve()}function d(e,t,i,s,r){return console.log(`HandleMove: Moving piece from (${e}, ${t}) to (${i}, ${s})`),l(e,t,i,s,r).then((()=>(r.turn===n.h8&&(document.getElementById("wait-label").style.display="flex",document.getElementById("help-button").style.display="none"),new Promise((e=>setTimeout(e,300)))))).then((()=>{r.turn===n.h8&&r.aiEnabled&&async function(e){if(e.finished)return void console.log("Game is over, no more moves allowed.");console.log("AI is thinking...");const t=(new Date).getTime(),i=e.getBestMoveForState(e,n.h8),s=(new Date).getTime();console.log("AI took",s-t,"ms to make a move."),console.log("Best neutron move found by AI:",i[0]),console.log("Best piece move found by AI:",i[1]),i.length>0?(await l(i[0][0][0],i[0][0][1],i[0][1][0],i[0][1][1],e),e.switchTurn(),await new Promise((e=>setTimeout(e,100))),await l(i[1][0][0],i[1][0][1],i[1][1][0],i[1][1][1],e),e.switchTurn(),u(e),document.getElementById("wait-label").style.display="none",document.getElementById("help-button").style.display="flex"):console.log("No valid moves for AI.");const r=a(e);e.finished&&c(r)}(r)})).catch((e=>{console.error("Error in handleMove:",e)}))}function h(e,t,i){if(i.finished)return void console.log("Game is over, no more moves allowed.");const s=i.grid[e][t].state;if(null!==i.selectedPiece)if(i.isValidMove(i.selectedPiece.x,i.selectedPiece.y,e,t)){d(i.selectedPiece.x,i.selectedPiece.y,e,t,i),i.switchTurn(),u(i),i.selectedPiece=null;const s=a(i);if(i.finished)return void c(s);i.gameStarted||(i.gameStarted=!0,document.getElementById("toggleModeButton").disabled=!0,document.getElementById("difficultyButton").disabled=!0)}else i.selectedPiece=null,o(document.getElementById("gameGrid"),i);else(s!==i.turn||i.turnStage!==n.fm&&i.turnStage!==n.jX)&&(s!==n.f$||i.turnStage!==n.Ak&&i.turnStage!==n.cd)||(i.selectedPiece={x:e,y:t},i.highlightMovesForX(e,t),function(e){const t=e.getHighlightedCells();t.forEach((([e,t])=>{const i=document.querySelector(`.cell[data-x='${e}'][data-y='${t}']`);i&&i.classList.add("highlight")}))}(i))}function a(e){const t=e.getPiecesForColour(n.f$)[0];if(!t)return console.error("Neutron not found on the board"),null;const i=t[1];return 0===i?(e.finished=!0,n.h8):i===e.gridYsize-1?(e.finished=!0,n.vS):e.neutronHasMoves()?null:(e.finished=!0,e.turn===n.cd?n.vS:n.h8)}function c(e){const t=document.getElementById("winLabel");e===n.h8?(t.textContent="Black Wins!",t.classList.remove("white-wins"),t.classList.add("black-wins")):e===n.vS&&(t.textContent="White Wins!",t.classList.remove("black-wins"),t.classList.add("white-wins")),t.style.display="none"}function g(e){switch(e){case n.h8:return"img/black.png";case n.vS:return"img/white.png";case n.f$:return"img/neutron.png";default:return""}}function u(e){const t=document.getElementById("turnIndicator");let i="";e.turn===n.vS?(i="White: ",t.classList.add("white-turn"),t.classList.remove("black-turn")):(i="Black: ",t.classList.add("black-turn"),t.classList.remove("white-turn")),e.turnStage===n.Ak||e.turnStage===n.cd?(i+="Move the Neutron",t.classList.add("neutron-stage")):(i+="Move a Piece",t.classList.remove("neutron-stage")),t.innerText=i}function f(e){console.log("Difficulty set to",e.difficulty);const t=document.getElementById("difficultyButton");let i="";switch(e.difficulty){case 1:i="Easy";break;case 3:i="Normal";break;case 5:i="Hard";break;default:i="Unknown"}t.textContent=`Difficulty: ${i}`}document.addEventListener("DOMContentLoaded",(()=>{document.getElementById("resetButton").addEventListener("click",(()=>{e.initializeGameState(),r(e)})),document.getElementById("help-button").addEventListener("click",(()=>{document.getElementById("help-overlay").style.display="flex"})),document.getElementById("close-help-button").addEventListener("click",(()=>{document.getElementById("help-overlay").style.display="none"})),document.getElementById("difficultyButton").addEventListener("click",(()=>{e.setDifficulty(5===e.difficulty?1:e.difficulty+2),f(e)})),document.getElementById("toggleModeButton").addEventListener("click",(()=>{e.aiEnabled=!e.aiEnabled,document.getElementById("toggleModeButton").textContent=e.aiEnabled?"Disable AI":"Enable AI",document.getElementById("difficultyButton").disabled=!e.aiEnabled}));const e=new s.A(5,5);r(e)}))}},t={};function i(s){var n=t[s];if(void 0!==n)return n.exports;var r=t[s]={exports:{}};return e[s](r,r.exports,i),r.exports}i.d=(e,t)=>{for(var s in t)i.o(t,s)&&!i.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i(550);i(839)})();